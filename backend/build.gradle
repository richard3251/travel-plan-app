plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.travelapp'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'org.springdoc') {
            details.useVersion '2.7.0'
        }
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// mysql
	implementation 'com.mysql:mysql-connector-j:8.2.0'
    // WebClient만 사용하므로 부트 스타터 대신 라이브러리 의존성만 추가
    implementation 'org.springframework:spring-webflux'
	// .env 파일 인식하기위한 라이브러리
	implementation 'me.paulschwarz:spring-dotenv:3.0.0'
	// spring-security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
	// Redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	// OpenAPI/Swagger UI
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

}

tasks.named('test') {
	useJUnitPlatform()
}
